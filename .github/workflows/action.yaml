name: Serverless Demo

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12.11"]
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "tests/requirements.txt"
      - name: Run pylint
        run: |
          pylint src/

  deploy-production:
    name: Production Deployment
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        node-version: ["23.x"]
        os: ["ubuntu-latest"]
    steps:
      - run: |
          echo "@todo implement steps for production deployment"

  create-release:
    name: Create Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    needs:
      - build
      - deploy-production
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Get package version
        id: get_version
        run: |
          content=$(cat package.json)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "packageJson=$content" >> $GITHUB_OUTPUT
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: ${{ fromJson(steps.get_version.outputs.packageJson).version }}
