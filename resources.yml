Resources:
  DemoSensitiveDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: demo-sensitive-records
      RetentionInDays: "7"
  GetUnderscoreuserLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      DataProtectionPolicy:
        Name: GetUserDataProtectionPolicy
        Description: Get user data protection policy
        Version: "2021-06-01"
        Statement:
          - Sid: "demo-audit-policy"
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/Name
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/DateOfBirth
              - arn:aws:dataprotection::aws:data-identifier/PhoneNumber-US
              - arn:aws:dataprotection::aws:data-identifier/ZipCode-US
              - arn:aws:dataprotection::aws:data-identifier/Ssn-US
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
            Operation:
              Audit:
                FindingsDestination:
                  CloudWatchLogs:
                    LogGroup: !Ref DemoSensitiveDataLogGroup
          - Sid: "demo-redact-policy"
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/Name
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/DateOfBirth
              - arn:aws:dataprotection::aws:data-identifier/PhoneNumber-US
              - arn:aws:dataprotection::aws:data-identifier/ZipCode-US
              - arn:aws:dataprotection::aws:data-identifier/Ssn-US
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
            Operation:
              Deidentify:
                MaskConfig:
                  CustomValue:
      RetentionInDays: "7"
  GetUnderscoreorderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      DataProtectionPolicy:
        Name: GetOrderDataProtectionPolicy
        Description: Get order data protection policy
        Version: "2021-06-01"
        Statement:
          - Sid: "demo-audit-policy"
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/Name
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/ZipCode-US
              - arn:aws:dataprotection::aws:data-identifier/PhoneNumber-US
            Operation:
              Audit:
                FindingsDestination:
                  CloudWatchLogs:
                    LogGroup: !Ref DemoSensitiveDataLogGroup
          - Sid: "demo-redact-policy"
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/Name
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - arn:aws:dataprotection::aws:data-identifier/ZipCode-US
              - arn:aws:dataprotection::aws:data-identifier/PhoneNumber-US
            Operation:
              Deidentify:
                MaskConfig:
                  CustomValue:
      RetentionInDays: "7"
  WarmUpPluginDefaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: "7"
  RDSDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.08.2
      MasterUsername: admin
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref KMSKey
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 5
      VpcSecurityGroupIds:
        - sg-1234567890
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: sls-db-subnet
      DBSubnetGroupDescription: sls demo subnet group
      SubnetIds:
        - subnet-id-region-1a
        - subnet-id-region-1b
        - subnet-id-region-1c
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref RDSDBCluster
  KSMAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/DemoService${self:custom.stage}KMSAlias
      TargetKeyId: !Ref KMSKey
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Ref AWS::StackName
        Statement:
          - Sid: "KMS admin"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - kms:*
            Resource: "*"
  DemoServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DemoService${self:custom.stage}RoleName
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - sns.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  DemoServicePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DemoService${self:custom.stage}DefaultPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - 'Fn::Join':
                - ':'
                -
                  - 'arn:aws:logs'
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - 'log-group:/aws/lambda/*:*:*'
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:DeleteNetworkInterface
              - kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: arn:aws:s3:::${file(serverless.env.yml):${self:custom.stage}.deployment_bucket_name}
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - 'Fn::Join':
                - ':'
                -
                  - 'arn:aws:ssm'
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - 'parameter/${self:custom.stage}/demo/*'
          - Effect: Allow
            Action:
              - logs:PutDataProtectionPolicy
              - logs:CreateLogDelivery
              - logs:PutResourcePolicy
              - logs:DescribeResourcePolicies
              - logs:DescribeLogGroups
            Resource: '*'
      Roles:
        - !Ref DemoServiceRole
  DemoSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DemoLambdaAlertSNS
      Subscription:
        - Endpoint: demouser@example.com
          Protocol: email
      FifoTopic: false
Outputs:
  RDSSecret:
    Value:
      Fn::GetAtt: RDSDBCluster.MasterUserSecret.SecretArn
