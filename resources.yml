cf_resources:
  RDSDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.2
      MasterUsername: admin
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref KMSKey
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 5
      VpcSecurityGroupIds:
        - vpc-security-group-id
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: sls-db-subnet
      DBSubnetGroupDescription: sls demo subnet group
      SubnetIds:
        - subnet-id-region-1a
        - subnet-id-region-1b
        - subnet-id-region-1c
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref RDSDBCluster
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Ref "AWS::StackName"
        Statement:
          - Sid: "KMS admin"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - kms:*
            Resource: "*"
  DemoServiceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: DemoService${self:custom.stage}DefaultPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:logs'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'log-group:/aws/lambda/*:*:*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - kms:Decrypt
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: arn:aws:s3:::${file(serverless.env.yml):${self:custom.stage}.deployment_bucket_name}
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:ssm'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'parameter/${self:custom.stage}/demo/*'

Outputs:
  RDSSecret:
    Value:
      Fn::GetAtt: RDSDBCluster.MasterUserSecret.SecretArn
