org: itsmindo
service: ${self:custom.project_name}
frameworkVersion: '4'

custom:
  project_name: 'demo'
  stage: ${opt:stage, 'dev'}
  default_timeout: 30
  default_lambda_memory_size: 128
  warmup:
    default:
      name: ${self:custom.project_name}-${self:custom.stage}-warm-up
      enabled: true
      memorySize: 128
      concurrency: 2
      events:
        - schedule: 'rate(5 minutes)'
      tags:
          service: demo
          environment: ${self:custom.stage}
      prewarm: true
      verbose: true
      logRetentionInDays: 7
  serverless-offline:
    httpPort: 8080
    resourceRoutes: true

provider:
  name: aws
  runtime: python3.12
  region: us-west-2
  tags:
    service: ${self:custom.project_name}
    stage: ${self:custom.stage}
  environment:
    stage: ${self:custom.stage}
    service: ${self:service}
  deploymentBucket:
    name: ${file(serverless.env.yml):${self:custom.stage}.deployment_bucket_name}
    blockPublicAccess: true
    tags:
      service: ${self:custom.project_name}
      environment: ${self:custom.stage}
  iam:
    role: ${file(serverless.env.yml):${self:custom.stage}.lambda_role}

package:
  individually: false
  patterns:
    - src/**
    - '!.git/'
    - '!packages/python/**'
    - '!node_modules/**'
    - '!README.md'
    - '!Pipfile'
    - '!package.json'
    - '!package-lock.json'
    - '!resources.yml'
    - '!layers.yml'
    - '!lambdas.yml'

resources:
  ${file(resources.yml)}

plugins:
  - serverless-plugin-warmup
  - serverless-offline
  - serverless-python-requirements

layers:
  ${file(layers.yml):layer}

functions:
  ${file(lambdas.yml):cf_lambdas}
